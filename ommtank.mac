#Turbo 20
#EVENT GazeYou              "#*#gaze of deadly power focusing on you"
#EVENT MarkOfDeath			"#*#You have been marked for death#*#"
#EVENT OMMEngage			"#*#OMMEngage#*#"

#EVENT RootTankOn			"#*#RootTankOn#*#"
#EVENT RootTankOff			"#*#RootTankOff#*#"

#EVENT WarCry				"#*#OMMWarCry#*#"

#include xiris_common/xiris_spell_routines.inc

Sub Main(string _type, string _tankPoint)
	/call xbot_initialize_spellRoutines
	/declare bln_OMMEngaged 		bool 	outer FALSE
	/declare bln_rootTank			bool	outer FALSE
	/declare root_X					int	    outer 0
	/declare root_Y					int	    outer 0
	/declare root_Z					int	    outer 0
	/declare target_X				int 	outer 0
	/declare target_Y				int 	outer 0
	/declare target_Z				int 	outer 0
	/declare rootDist				int		outer 0

	/declare arr_bersekerList[8]	string  outer 
	/varset arr_bersekerList[1]	Ophidia 
	/varset arr_bersekerList[2] Ophelia
	/varset arr_bersekerList[3] Ophemia
	/varset arr_bersekerList[4] Ophenia
	/varset arr_bersekerList[5] Opheoia
	/varset arr_bersekerList[6] Ophexia
	/varset arr_bersekerList[7] Opheyia
	/varset arr_bersekerList[8] Ophezia

	/echo Calling OMM Setup
	/dgt OMMSetup

	:wait_loop
	/doevents
	/delay 5
	
	/if (!${bln_OMMEngaged}) /goto :wait_loop
	
	| Announcing Engage
	/rs OMMStart ${Time.Time24}

	| Stonewall
	/if (${Me.CombatAbilityReady[Stonewall Discipline]}) /doability Stonewall Discipline
	
	| Debuff, and start aggro
	/rs DebuffTarget ${Target.ID}
	/dgt singsongs
	/attack on
	:ActiveLoop
		/if (${Zone.ShortName.Equal[thundercrest]}) {
			/delay 10
			/goto :ActiveLoop
		}
		/if (${Math.Distance[${target_Y},${target_X},${target_Z}:${root_Y} ${root_X} ${root_Z}]} > ${rootDist} && ${bln_rootTank}) /warp loc ${root_Y} ${root_X} ${root_Z}
		/face fast
		/doevents
		/call getAggro
	/goto :ActiveLoop
/return




Sub Event_OMMEngage
	/echo \aoEngaging OMM
	/varset bln_OMMEngaged TRUE
	:OMMTarget
	/if (!${Target.ID}) {
		/target Overlord
		/goto :OMMTarget
	}
	/if (!${Target.Name.Find[Overlord]}) {
		/echo \ar OMM not targetted. Try that again!
		/target Overlord
		/goto :OMMTarget
	}

    /if (${Me.CombatAbilityReady[Stonewall Discipline]}) /doability "Stonewall Discipline"
    /delay 5
	/attack on
	/echo Hammering aggro
	/if (${Me.CombatAbilityReady[Ancient: Chaos Cry]}) /doability "Ancient: Chaos Cry"
	/delay 10
	/if (${Me.CombatAbilityReady[Bazu Bellow]}) /doability "Bazu Bellow"
	/delay 10

	/dgt SingSongs
	/face fast
	/attack on
	/attack on
/return

Sub EVENT_WarCry
	/echo \ag WARCRY CALLED!
	/declare bStatus 	string	local FALSE
	/declare berTest 	string  local NULL
	/declare berName1 	string 	local NULL
	/declare berName2	string  local NULL
	/declare i			int 	local 1
	/declare foundCount int 	local 0
	:checkCoerced1
	/for i 1 to ${arr_bersekerList.Size}
		/varset berTest ${arr_bersekerList[${i}]}
		/if (!${SpawnCount[pc ${berTest}]}) /goto :next_berserker
		/dquery ${berTest} -q "Me.CombatAbilityReady[Ancient: Cry of Chaos]"
		/delay 20 ${DanNet.Query.Received}
		/varset bStatus ${DanNet.Q}
		/echo \aw ${berTest} Cry? ${bStatus}
		/if (${bStatus.Equal[TRUE]}) {
			/varcalc foundCount ${foundCount}+1
			/varset berName${foundCount} ${berTest}
		}
		/if (${foundCount} == 2) /goto :CastCryOn1
	:next_berserker
	/next i

	:CastCryOn1
	/if (!${SpawnCount[Coerced_Lieutenant_000]}) {
		/echo \ar No Coerced_Lieutenant_000 Found! Trying Next one!
		/goto :CastCryOn2
	}
	/echo \ao Calling Cry on \ag${Spawn[Coerced_Lieutenant_000].CleanName} \aw(\aG${Spawn[npc Coerced_Lieutenant_000].ID}\aw) from \a ${berName1}
	|/call CallBerserkerCry ${berName} ${Spawn[Coerced_Lieutenant_000].ID}

	:CastCryOn2
	/if (!${SpawnCount[Coerced_Lieutenant000]}) {
		/echo \ar No Coerced_Lieutenant000 Found! Exiting
		/goto :return
	}
	/echo \ao Calling Cry on \ag${Spawn[Coerced_Lieutenant000].CleanName} \aw(\aG${Spawn[npc Coerced_Lieutenant000].ID}\aw) from \a ${berName2}
	|/call CallBerserkerCry ${berName} ${Spawn[Coerced_Lieutenant000].ID}
:return	
/doevents flush
/return

Sub CallBerserkerCry(string _berserker,  int _targetID)
	/echo \aoAsking \ag${_berserker}\aw to cast \agAncient: Cry of Chaos\aw on ${_targetID}
	/dex ${_berserker} /multiline ; /mqpause on ;  /attack off ; /stick off ; /tar id ${_targetID} ; /delay 5 ; /doability "Ancient: Cry of Chaos" ; /target npc overlord ; /attack on ; /mqpause off
/return 



Sub EVENT_RootTankOn
	/varset root_X ${Me.X}
	/varset root_Y ${Me.Y}
	/varset root_Z ${Me.Z}
	/varset target_X ${Target.X}
	/varset target_X ${Target.Y}
	/varset target_X ${Target.Z}
	/varset rootDist ${Target.Distance}
	/echo \awRooting Myself\ao${root_Y},${root_X},${root_Z} \awdist:\ao${rootDist}
	/varset bln_rootTank TRUE
	/doevents flush RootTankOn
/return

Sub EVENT_RootTankOff
	/echo \aoUn-rooting myself!
	/varset bln_rootTank FALSE
	/doevents flush RootTankOff
/return

Sub getAggro
	:aggroLoop
		/if (${Zone.ShortName.Equal[${Zone.ShortName.Equal[${Me.BoundLocation[0]}]}]}) /end
		/if (${Target.Distance} > 20 && ${bln_rootTank}) /warp loc ${root_Y} ${root_X} ${root_Z}
		/if (${Me.TargetOfTarget.ID} != ${Me.ID}) {
			/echo OMM NOT TARGETTING ME
            /if (${Me.CombatAbilityReady["Bellow of the Mastruq"]}) /doability "Bellow of the Mastruq"
			/delay 20
			/if (${Me.CombatAbilityReady["Bazu Bellow"]}) /doability "Bazu Bellow"
			/doevents
		} 
/return

Sub EVENT_GazeYou
    /beep
    /echo \arGAZE OF MATA MURAM on ME!
	/echo \a-w Attempting Clicking \agMirrored Mask \a-w${Time.Time24}
	/if (!${FindItem[Mirrored Mask].ID} && ${Zone.ShortName.Equal[anguish]}) {
		/shout NO MIRRORED MASK! WE ARE DOOOOMED!
		/dgt FireTL
		/shout Calling for TL!
	} else {
		
		:gazeCastWait
		/attack off
		/stick off 
		/if (${Navigation.Active}) /nav stop
		/if (${Me.Casting.ID} && ${Me.Class.ShortName.NotEqual[BRD]}) {
			/echo \arCasting, waiting to stop, then click!
			/delay 5
			/goto :gazeCastWait
		}
		/echo \ao Mask in Slot\aw ${FindItem[Mirrored Mask].InvSlot}
		/if (${FindItem[Mirrored Mask].InvSlot} != 3) {
			/echo \ag Swapping Mask to Face!
			/exchange "Mirrored Mask" face
			/delay 10
		}
		/if (${Me.Class.ShortName.Equal[BRD]}) {
			/shout Clicking my Mirrored Mask!
			/echo \ag Attempting Clicking \aoMirrored Mask \ag${Time.Time24}!
			/call MQ2Medley ITEM "Mirrored Mask" ${Target.ID} TRUE
		} else {
			/shout Clicking my Mirrored Mask!
			/echo \ag Attempting Clicking \aoMirrored Mask \ag${Time.Time24}!
			/if (!${Defined[interruptFlag]}) /declare interruptFlag bool outer FALSE	
			/if (${Bool[${Me.Casting.ID}]}) /call Interrupt
			/call MQ2Cast "Mirrored Mask" ITEM
		}
		/delay 20
		/call RestoreFaceSlot
		/doevents flush GazeYou
	}
/return

Sub EVENT_MarkOfDeath
	/rs ${Me.Name} has been Marked for Death!
	/dt Xanshia cureRequest ${Me.Name} ${Me.ID} disease ${Debuff.Diseased} TRUE
/return 

Sub RestoreFaceSlot
	/exchange "${strFaceItem}" face
	/delay 5
/return 
