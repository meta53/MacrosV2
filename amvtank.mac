#Turbo 20
#EVENT AMVMarkOn		    "#*#You have been marked for death#*#"
#EVENT AMVEngage			"#*#AMVEngage#*#"
#EVENT RootTankOn			"#*#RootTankOn#*#"
#EVENT RootTankOff			"#*#RootTankOff#*#"

#include xiris_common/xiris_spell_routines.inc

Sub Main(string _type, string _tankPoint)
	/call xbot_initialize_spellRoutines
	/melee aggro=on
    /melee taunt=on
	/declare bln_amvEngaged 		bool 	outer FALSE
	/declare bln_rootTank			bool	outer FALSE
	/declare root_X					int	    outer 0
	/declare root_Y					int	    outer 0
	/declare root_Z					int	    outer 0

	/declare timer_mark_ae 		    timer 	outer 	300s
	/declare markSeconds			int 	outer 	300
	/declare stunSeconds			int   	outer 	0	
	/declare int_timeMarkInterval 	int 	outer   300

	/echo Calling AMV Setup
	/dgt AMVSetup

	:wait_loop
	/doevents
	/delay 5
	/if (!${bln_amvEngaged}) /goto :wait_loop

	| Announcing Engage
	/rs AMVStart ${Time.Time24}

	| Stonewall
	/if (${Me.CombatAbilityReady[Stonewall Discipline]}) /doability Stonewall Discipline
	
	| Debuff, and start aggro
	/rs DebuffTarget ${Target.ID}
	/dgt singsongs
	/killthis

	:ActiveLoop
		/doevents
		|------
		| NPC/AMV Kills
		|------

		/varcalc markSeconds ${timer_mark_ae}/10
		/echo timer: ${timer_mark_ae} seconds: ${markSeconds}
		
		| Mark of Death Run away!
		/if (${markSeconds} <= 5 && !${bln_announcedRetreat}) {
			/if (!${timer_announce_retreat}) /call commandRetreat
		} 
		
		| Kill AMV
		/if (${markSeconds} > 5) {
			/if (!${timer_announce_kill}) /call commandAttack
		}

		/doevents
		/call getAggro
	/goto :ActiveLoop
/return

| AMV fired his AE, safe to kill
Sub Event_AMVMarkOn
	/echo \arMark ON! \aw${Time.Time24} \ag${Time.SecondsSinceMidnight}, resetting interval to ${int_timeMarkInterval}
	/varset timer_mark_ae ${int_timeMarkInterval}
	/varcalc markSeconds ${int_timeMarkInterval}/10
	/rs Mark of Death On! ${markSeconds}s till recast!
	/call commandRetreat
	/doevents flush AMVMarkOn
/return


Sub commandRetreat
	/echo \ar${timer_mark_ae} ${markSeconds}s \awuntil AMV AE, \aoRETREAT
	/rs AMVRetreat ${markSeconds}
	/varset bln_announcedRetreat 	TRUE
	/varset bln_announcedKill		FALSE
	/varset timer_announce_retreat 50s
/return 


Sub commandAttack
	/if (!${SpawnCount[npc guard]}) /rs AMVKill ${markSeconds}
	/echo \artimer:${timer_mark_ae} seconds${markSeconds}s \awuntil AMV AE  (no guards), \agKILLAMV
	/varset bln_announcedRetreat  FALSE
	/varset bln_announcedKill	  TRUE
	/varset timer_announce_kill 10s
/return


Sub Event_AMVEngage
	/echo \aoEngaging AMV
	:amvTarget
	/if (!${Target.ID}) {
		/target Vangl
		/goto :amvTarget
	}
	/if (!${Target.Name.Find[Vangl]}) {
		/echo \ar AMV not targetted. Try that again!
		/return
	}
	/if (${Target.Name.Find[Vangl]} && !${Target.Distance3D} > 100) {
		/echo \ar AMV out of Range. Try that again!
		/return
	}
    /if (${Me.CombatAbilityReady[Stonewall Discipline]})  /doability "Stonewall Discipline"
    /delay 5
	/echo Hammering aggro
	/if (${Me.CombatAbilityReady[Ancient: Chaos Cry]}) /doability "Ancient: Chaos Cry"
	/delay 5
	/if (${Me.CombatAbilityReady[Bazu Bellow]}) /doability "Bazu Bellow"
	/delay 5

	/dgt SingSongs
	/face fast
	/attack on
	/attack on
/return

Sub EVENT_RootTankOn
	/varset root_X ${Me.X}
	/varset root_Y ${Me.Y}
	/varset root_Z ${Me.Z}
	/varset bln_rootTank TRUE
/return

Sub EVENT_RootTankOff
	/varset bln_rootTank FALSE
/return


Sub getAggro
	:aggroLoop
		/if (${Target.Distance} > 20 && ${bln_rootTank}) /warp loc ${root_Y} ${root_X} ${root_Z}
		/if (${Me.TargetOfTarget.ID} != ${Me.ID}) {
			/echo AMV NOT TARGETTING ME
            /if (${Me.CombatAbilityReady["Bellow of the Mastruq"]}) /doability "Bellow of the Mastruq"
			/if (${Me.CombatAbilityReady["Bazu Bellow"]}) /doability "Bazu Bellow"
			/delay 10
			/goto :aggroLoop
		} 
/return

